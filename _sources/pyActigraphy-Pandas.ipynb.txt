{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# How to read data from DataFrames with pyActigraphy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Imported packages and input data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The usual suspects:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:14.747893Z",
     "start_time": "2020-06-23T17:32:14.558402Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:15.099291Z",
     "start_time": "2020-06-23T17:32:14.750173Z"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.005641Z",
     "start_time": "2020-06-23T17:32:15.101405Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
      "  import pandas.util.testing as tm\n"
     ]
    }
   ],
   "source": [
    "import pyActigraphy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this example, let's generate some input data:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "NB: if you already have your data under a pandas.DataFrame format, jump directly to the next section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.011026Z",
     "start_time": "2020-06-23T17:32:17.007868Z"
    }
   },
   "outputs": [],
   "source": [
    "N = 1440*7 # 7 days of acquisition at a frequency of 60s."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.019232Z",
     "start_time": "2020-06-23T17:32:17.013189Z"
    }
   },
   "outputs": [],
   "source": [
    "activity = np.random.normal(10,1,N)\n",
    "light = np.random.normal(100,10,N)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.025234Z",
     "start_time": "2020-06-23T17:32:17.021967Z"
    }
   },
   "outputs": [],
   "source": [
    "non_wear = np.empty(N)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.030495Z",
     "start_time": "2020-06-23T17:32:17.027512Z"
    }
   },
   "outputs": [],
   "source": [
    "# Set up a segment of  spurious inactivity\n",
    "activity[2060:2160] = 0.0\n",
    "non_wear[2060:2160] = 1.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.035900Z",
     "start_time": "2020-06-23T17:32:17.032932Z"
    }
   },
   "outputs": [],
   "source": [
    "d = {'Activity': activity, 'Light': light, 'Non-wear': non_wear}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.042113Z",
     "start_time": "2020-06-23T17:32:17.037981Z"
    }
   },
   "outputs": [],
   "source": [
    "index = pd.date_range(start='01-01-2020',freq='60s',periods=N)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.048532Z",
     "start_time": "2020-06-23T17:32:17.044366Z"
    }
   },
   "outputs": [],
   "source": [
    "data = pd.DataFrame(index=index,data=d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.070211Z",
     "start_time": "2020-06-23T17:32:17.050666Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Activity</th>\n",
       "      <th>Light</th>\n",
       "      <th>Non-wear</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-01-01 00:00:00</th>\n",
       "      <td>9.803906</td>\n",
       "      <td>97.208266</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-01 00:01:00</th>\n",
       "      <td>11.322234</td>\n",
       "      <td>106.991005</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-01 00:02:00</th>\n",
       "      <td>8.204245</td>\n",
       "      <td>99.137269</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-01 00:03:00</th>\n",
       "      <td>8.867003</td>\n",
       "      <td>99.459600</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-01 00:04:00</th>\n",
       "      <td>9.187778</td>\n",
       "      <td>90.814416</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-07 23:55:00</th>\n",
       "      <td>7.516059</td>\n",
       "      <td>83.467992</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-07 23:56:00</th>\n",
       "      <td>10.156999</td>\n",
       "      <td>91.532551</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-07 23:57:00</th>\n",
       "      <td>10.241579</td>\n",
       "      <td>96.630307</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-07 23:58:00</th>\n",
       "      <td>10.751310</td>\n",
       "      <td>97.703363</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-07 23:59:00</th>\n",
       "      <td>9.172097</td>\n",
       "      <td>110.284720</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10080 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Activity       Light  Non-wear\n",
       "2020-01-01 00:00:00   9.803906   97.208266       0.0\n",
       "2020-01-01 00:01:00  11.322234  106.991005       0.0\n",
       "2020-01-01 00:02:00   8.204245   99.137269       0.0\n",
       "2020-01-01 00:03:00   8.867003   99.459600       0.0\n",
       "2020-01-01 00:04:00   9.187778   90.814416       0.0\n",
       "...                        ...         ...       ...\n",
       "2020-01-07 23:55:00   7.516059   83.467992       0.0\n",
       "2020-01-07 23:56:00  10.156999   91.532551       0.0\n",
       "2020-01-07 23:57:00  10.241579   96.630307       0.0\n",
       "2020-01-07 23:58:00  10.751310   97.703363       0.0\n",
       "2020-01-07 23:59:00   9.172097  110.284720       0.0\n",
       "\n",
       "[10080 rows x 3 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Manual creation of a BaseRaw object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.076346Z",
     "start_time": "2020-06-23T17:32:17.073014Z"
    }
   },
   "outputs": [],
   "source": [
    "from pyActigraphy.io import BaseRaw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.102397Z",
     "start_time": "2020-06-23T17:32:17.079433Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on class BaseRaw in module pyActigraphy.io.base:\n",
      "\n",
      "class BaseRaw(pyActigraphy.sleep.sleep.SleepBoutMixin, pyActigraphy.sleep.scoring_base.ScoringMixin, pyActigraphy.metrics.metrics.MetricsMixin, pyActigraphy.filters.filters.FiltersMixin)\n",
      " |  BaseRaw(name, uuid, format, axial_mode, start_time, period, frequency, data, light)\n",
      " |  \n",
      " |  Base class for raw data.\n",
      " |  \n",
      " |  Method resolution order:\n",
      " |      BaseRaw\n",
      " |      pyActigraphy.sleep.sleep.SleepBoutMixin\n",
      " |      pyActigraphy.sleep.scoring_base.ScoringMixin\n",
      " |      pyActigraphy.metrics.metrics.MetricsMixin\n",
      " |      pyActigraphy.filters.filters.FiltersMixin\n",
      " |      builtins.object\n",
      " |  \n",
      " |  Methods defined here:\n",
      " |  \n",
      " |  __init__(self, name, uuid, format, axial_mode, start_time, period, frequency, data, light)\n",
      " |      Initialize self.  See help(type(self)) for accurate signature.\n",
      " |  \n",
      " |  binarized_data(self, threshold)\n",
      " |      Boolean thresholding of Pandas Series\n",
      " |  \n",
      " |  duration(self)\n",
      " |      Duration (in days, hours, etc) of the data acquistion period\n",
      " |  \n",
      " |  length(self)\n",
      " |      Number of data acquisition points\n",
      " |  \n",
      " |  mask_fraction(self)\n",
      " |      Fraction of masked data\n",
      " |  \n",
      " |  read_sleep_diary(self, input_fname, header_size=2, state_index={'ACTIVE': 2, 'NAP': 1, 'NIGHT': 0, 'NOWEAR': -1}, state_colour={'NAP': '#7bc043', 'NIGHT': '#d3d3d3', 'NOWEAR': '#ee4035'})\n",
      " |      Reader function for sleep diaries.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      input_fname: str\n",
      " |          Path to the sleep diary file.\n",
      " |      header_size: int\n",
      " |          Header size (i.e. number of lines) of the sleep diary.\n",
      " |          Default is 2.\n",
      " |      state_index: dict\n",
      " |          The dictionnary of state's indices.\n",
      " |          Default is ACTIVE=2, NAP=1, NIGHT=0, NOWEAR=-1.\n",
      " |      state_color: dict\n",
      " |          The dictionnary of state's colours.\n",
      " |          Default is NAP='#7bc043', NIGHT='#d3d3d3', NOWEAR='#ee4035'.\n",
      " |  \n",
      " |  resampled_data(self, freq, binarize=False, threshold=0)\n",
      " |      Data resampled at the specified frequency.\n",
      " |      If mask_inactivity is True, the `mask` is used to filter inactive data.\n",
      " |  \n",
      " |  resampled_light(self, freq)\n",
      " |      Light measurement, resampled at the specified frequency.\n",
      " |  \n",
      " |  time_range(self)\n",
      " |      Range (in days, hours, etc) of the data acquistion period\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors defined here:\n",
      " |  \n",
      " |  axial_mode\n",
      " |      Acquistion mode (mono-axial or tri-axial)\n",
      " |  \n",
      " |  data\n",
      " |      Indexed data extracted from the raw file.\n",
      " |      If mask_inactivity is set to true, the `mask` is used\n",
      " |      to filter out inactive data.\n",
      " |  \n",
      " |  display_name\n",
      " |      Name to be used for display.\n",
      " |  \n",
      " |  exclude_if_mask\n",
      " |      Boolean to exclude partially masked data when resampling\n",
      " |  \n",
      " |  format\n",
      " |      Format of the raw data file (AWD,RPX,MTN,...)\n",
      " |  \n",
      " |  frequency\n",
      " |      Acquisition frequency as extracted from the raw file.\n",
      " |  \n",
      " |  inactivity_length\n",
      " |      Length of the inactivity mask.\n",
      " |  \n",
      " |  light\n",
      " |      Indexed light extracted from the raw file.\n",
      " |      If mask_inactivity is set to true, the `mask` is used\n",
      " |      to filter out inactive data.\n",
      " |  \n",
      " |  mask\n",
      " |      Mask used to filter out inactive data.\n",
      " |  \n",
      " |  mask_inactivity\n",
      " |      Switch to mask inactive data.\n",
      " |  \n",
      " |  name\n",
      " |      Study name as extracted from the raw file.\n",
      " |  \n",
      " |  period\n",
      " |      Period of data acquistion as extracted from the raw file or\n",
      " |      specified by the user.\n",
      " |  \n",
      " |  raw_data\n",
      " |      Indexed data extracted from the raw file.\n",
      " |  \n",
      " |  raw_light\n",
      " |      Light measurement performed by the device\n",
      " |  \n",
      " |  sleep_diary\n",
      " |      :class:`SleepDiary` class instanciation.\n",
      " |  \n",
      " |  start_time\n",
      " |      Start time of data acquistion as extracted from the raw file or\n",
      " |      specified by the user.\n",
      " |  \n",
      " |  uuid\n",
      " |      UUID of the device used to acquire the data\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from pyActigraphy.sleep.sleep.SleepBoutMixin:\n",
      " |  \n",
      " |  active_bouts(self, duration_min=None, duration_max=None, algo='Roenneberg', *args, **kwargs)\n",
      " |      Active bouts.\n",
      " |      \n",
      " |      Activity periods identified as active.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      duration_min: str,optional\n",
      " |          Minimal time duration for an active period.\n",
      " |          Default is None (no filtering).\n",
      " |      duration_max: str,optional\n",
      " |          Maximal time duration for an active period.\n",
      " |          Default is None (no filtering).\n",
      " |      algo: str, optional\n",
      " |          Sleep/wake scoring algorithm to use.\n",
      " |          Default is 'Roenneberg'.\n",
      " |      *args\n",
      " |          Variable length argument list passed to the scoring algorithm.\n",
      " |      **kwargs\n",
      " |          Arbitrary keyword arguements passed to the scoring algorithm.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      active_bouts: a list of pandas.Series\n",
      " |      \n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> raw.active_bouts(duration_min='2h', algo='Roenneberg')\n",
      " |          XXX\n",
      " |  \n",
      " |  active_durations(self, duration_min=None, duration_max=None, algo='Roenneberg', *args, **kwargs)\n",
      " |      Duration of the active bouts.\n",
      " |      \n",
      " |      Duration of the activity periods identified as active.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      duration_min: str,optional\n",
      " |          Minimal time duration for an active period.\n",
      " |          Default is None (no filtering).\n",
      " |      duration_max: str,optional\n",
      " |          Maximal time duration for an active period.\n",
      " |          Default is None (no filtering).\n",
      " |      algo: str, optional\n",
      " |          Sleep/wake scoring algorithm to use.\n",
      " |          Default is 'Roenneberg'.\n",
      " |      *args\n",
      " |          Variable length argument list passed to the scoring algorithm.\n",
      " |      **kwargs\n",
      " |          Arbitrary keyword arguements passed to the scoring algorithm.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      active_durations: a list of pandas.TimeDelta\n",
      " |      \n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> raw.active_durations(duration_min='2h', algo='Roenneberg')\n",
      " |          XXX\n",
      " |  \n",
      " |  sleep_bouts(self, duration_min=None, duration_max=None, algo='Roenneberg', *args, **kwargs)\n",
      " |      Sleep bouts.\n",
      " |      \n",
      " |      Activity periods identified as sleep.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      duration_min: str,optional\n",
      " |          Minimal time duration for a sleep period.\n",
      " |          Default is None (no filtering).\n",
      " |      duration_max: str,optional\n",
      " |          Maximal time duration for a sleep period.\n",
      " |          Default is None (no filtering).\n",
      " |      algo: str, optional\n",
      " |          Sleep/wake scoring algorithm to use.\n",
      " |          Default is 'Roenneberg'.\n",
      " |      *args\n",
      " |          Variable length argument list passed to the scoring algorithm.\n",
      " |      **kwargs\n",
      " |          Arbitrary keyword arguements passed to the scoring algorithm.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      sleep_bouts: a list of pandas.Series\n",
      " |      \n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> raw.sleep_bouts(duration_min='2h', algo='Roenneberg')\n",
      " |          XXX\n",
      " |  \n",
      " |  sleep_durations(self, duration_min=None, duration_max=None, algo='Roenneberg', *args, **kwargs)\n",
      " |      Duration of the sleep bouts.\n",
      " |      \n",
      " |      Duration of the activity periods identified as sleep.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      duration_min: str,optional\n",
      " |          Minimal time duration for a sleep period.\n",
      " |          Default is None (no filtering).\n",
      " |      duration_max: str,optional\n",
      " |          Maximal time duration for a sleep period.\n",
      " |          Default is None (no filtering).\n",
      " |      algo: str, optional\n",
      " |          Sleep/wake scoring algorithm to use.\n",
      " |          Default is 'Roenneberg'.\n",
      " |      *args\n",
      " |          Variable length argument list passed to the scoring algorithm.\n",
      " |      **kwargs\n",
      " |          Arbitrary keyword arguements passed to the scoring algorithm.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      sleep_durations: a list of pandas.TimeDelta\n",
      " |      \n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> raw.sleep_durations(duration_min='2h', algo='Roenneberg')\n",
      " |          XXX\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors inherited from pyActigraphy.sleep.sleep.SleepBoutMixin:\n",
      " |  \n",
      " |  __dict__\n",
      " |      dictionary for instance variables (if defined)\n",
      " |  \n",
      " |  __weakref__\n",
      " |      list of weak references to the object (if defined)\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from pyActigraphy.sleep.scoring_base.ScoringMixin:\n",
      " |  \n",
      " |  AoffT(self, freq='5min', whs=12, binarize=True, threshold=4)\n",
      " |      Activity offset time.\n",
      " |      \n",
      " |      Activity offset time derived from the daily activity profile.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      freq: str, optional\n",
      " |          Data resampling `frequency string\n",
      " |          <https://pandas.pydata.org/pandas-docs/stable/timeseries.html>`_.\n",
      " |          Default is '5min'.\n",
      " |      whs: int, optional\n",
      " |          Window half size.\n",
      " |          Default is 12.\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized.\n",
      " |          Default is True.\n",
      " |      threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |          Default is 4.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      aot: Timedelta\n",
      " |          Activity offset time.\n",
      " |      \n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      This automatic detection of the activity offset time is based on the\n",
      " |      daily activity profile. It returns the time point where relative\n",
      " |      difference between the mean activity over :math:`whs` epochs after and\n",
      " |      before this time point is maximum:\n",
      " |      \n",
      " |      .. math::\n",
      " |          AoffT = \\max_{t}(\n",
      " |          \\frac{\\sum_{i=1}^{whs} x_{t+i}}{\\sum_{i=-whs}^{0} x_{t+i}} - 1\n",
      " |          )\n",
      " |      \n",
      " |      with:\n",
      " |      \n",
      " |      * :math:`x_{i}` is the activity count at time :math:`i`.\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> raw.AoffT()\n",
      " |          Timedelta('0 days 23:20:00')\n",
      " |          >>> raw.AoffT(binarize=False)\n",
      " |          Timedelta('0 days 23:05:00')\n",
      " |  \n",
      " |  AonT(self, freq='5min', whs=12, binarize=True, threshold=4)\n",
      " |      Activity onset time.\n",
      " |      \n",
      " |      Activity onset time derived from the daily activity profile.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      freq: str, optional\n",
      " |          Data resampling `frequency string\n",
      " |          <https://pandas.pydata.org/pandas-docs/stable/timeseries.html>`_.\n",
      " |          Default is '5min'.\n",
      " |      whs: int, optional\n",
      " |          Window half size.\n",
      " |          Default is 12.\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized.\n",
      " |          Default is True.\n",
      " |      threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |          Default is 4.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      aot: Timedelta\n",
      " |          Activity onset time.\n",
      " |      \n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      This automatic detection of the activity onset time is based on the\n",
      " |      daily activity profile. It returns the time point where difference\n",
      " |      between the mean activity over :math:`whs` epochs before and after this\n",
      " |      time point is maximum:\n",
      " |      \n",
      " |      .. math::\n",
      " |          AonT = \\max_{t}(\n",
      " |          \\frac{\\sum_{i=-whs}^{0} x_{t+i}}{\\sum_{i=1}^{whs} x_{t+i}} - 1\n",
      " |          )\n",
      " |      \n",
      " |      with:\n",
      " |      \n",
      " |      * :math:`x_{i}` is the activity count at time :math:`i`.\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> raw.AonT()\n",
      " |          Timedelta('0 days 07:15:00')\n",
      " |          >>> raw.AonT(binarize=False)\n",
      " |          Timedelta('0 days 07:05:00')\n",
      " |  \n",
      " |  CK(self, scale=1e-05, window=array([ 400,  600,  300,  400, 1400,  500,  350,    0,    0], dtype=int32), threshold=1.0)\n",
      " |      Cole&Kripke algorithm for sleep-wake identification.\n",
      " |      \n",
      " |      Algorithm for automatic sleep scoring based on wrist activity,\n",
      " |      developped by Cole, Kripke et al [1]_.\n",
      " |      \n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      scale: float, optional\n",
      " |          Scale parameter P.\n",
      " |          Default is 0.00001.\n",
      " |      window: np.array\n",
      " |          Array of weighting factors, :math:`W_{i}`.\n",
      " |          Default is [400, 600, 300, 400, 1400, 500, 350, 0, 0]\n",
      " |      threshold: float, optional\n",
      " |          Threshold value for scoring sleep/wake.\n",
      " |          Default is 1.0.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      ck: pandas.core.Series\n",
      " |          Time series containing the `D` scores (0: sleep, 1: wake) for each\n",
      " |          epoch.\n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      The output variable D of the CK algorithm is defined in [1]_ as:\n",
      " |      \n",
      " |      .. math::\n",
      " |      \n",
      " |          D = P*(\n",
      " |              [W_{-4},\\dots,W_{0},\\dots,W_{+2}]\n",
      " |              \\cdot\n",
      " |              [A_{-4},\\dots,A_{0},\\dots,A_{+2}])\n",
      " |      \n",
      " |      with:\n",
      " |      \n",
      " |      * D < 1 == sleep, D >= 1 == wake;\n",
      " |      * P, scale factor;\n",
      " |      * :math:`W_{0},W_{-1},W_{+1},\\dots`, weighting factors for the present\n",
      " |        minute, the previous minute, the following minute, etc.;\n",
      " |      * :math:`A_{0},A_{-1},A_{+1},\\dots`, activity scores for the present\n",
      " |        minute, the previous minute, the following minute, etc.\n",
      " |      \n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Cole, R. J., Kripke, D. F., Gruen, W., Mullaney, D. J.,\n",
      " |             & Gillin, J. C. (1992). Automatic Sleep/Wake Identification\n",
      " |             From Wrist Activity. Sleep, 15(5), 461â€“469.\n",
      " |             http://doi.org/10.1093/sleep/15.5.461\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |  \n",
      " |  Crespo(self, zeta=15, zeta_r=30, zeta_a=2, t=0.33, alpha='8h', beta='1h', estimate_zeta=False, seq_length_max=100, verbose=False)\n",
      " |      Crespo algorithm for activity/rest identification\n",
      " |      \n",
      " |      Algorithm for automatic identification of activity-rest periods based\n",
      " |      on actigraphy, developped by Crespo et al. [1]_.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      zeta: int, optional\n",
      " |          Maximum number of consecutive zeroes considered valid.\n",
      " |          Default is 15.\n",
      " |      zeta_r: int, optional\n",
      " |          Maximum number of consecutive zeroes considered valid (rest).\n",
      " |          Default is 30.\n",
      " |      zeta_a: int, optional\n",
      " |          Maximum number of consecutive zeroes considered valid (active).\n",
      " |          Default is 2.\n",
      " |      t: float, optional\n",
      " |          Percentile for invalid zeroes.\n",
      " |          Default is 0.33.\n",
      " |      alpha: str, optional\n",
      " |          Average hours of sleep per night.\n",
      " |          Default is '8h'.\n",
      " |      beta: str, optional\n",
      " |          Length of the padding sequence used during the processing.\n",
      " |          Default is '1h'.\n",
      " |      estimate_zeta: bool, optional\n",
      " |          If set to True, zeta values are estimated from the distribution of\n",
      " |          ratios of the number of series of consecutive zeroes to\n",
      " |          the number of series randomly chosen from the actigraphy data.\n",
      " |          Default is False.\n",
      " |      seq_length_max: int, optional\n",
      " |          Maximal length of the aforementioned random series.\n",
      " |          Default is 100.\n",
      " |      verbose: bool, optional\n",
      " |          If set to True, print the estimated values of zeta.\n",
      " |          Default is False.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      crespo : pandas.core.Series\n",
      " |          Time series containing the estimated periods of rest (0) and\n",
      " |          activity (1).\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Crespo, C., Aboy, M., FernÃ¡ndez, J. R., & MojÃ³n, A. (2012).\n",
      " |             Automatic identification of activityâ€“rest periods based on\n",
      " |             actigraphy. Medical & Biological Engineering & Computing, 50(4),\n",
      " |             329â€“340. http://doi.org/10.1007/s11517-012-0875-y\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> crespo = rawAWD.Crespo()\n",
      " |          >>> crespo\n",
      " |          2018-03-26 14:16:00    1\n",
      " |          2018-03-26 14:17:00    0\n",
      " |          2018-03-26 14:18:00    0\n",
      " |          (...)\n",
      " |          2018-04-06 08:22:00    0\n",
      " |          2018-04-06 08:23:00    0\n",
      " |          2018-04-06 08:24:00    1\n",
      " |          Length: 15489, dtype: int64\n",
      " |  \n",
      " |  Crespo_AoT(self, zeta=15, zeta_r=30, zeta_a=2, t=0.33, alpha='8h', beta='1h', estimate_zeta=False, seq_length_max=100, verbose=False)\n",
      " |      Automatic identification of activity onset/offset times, based on\n",
      " |      the Crespo algorithm.\n",
      " |      \n",
      " |      Identification of the activity onset and offset times using the\n",
      " |      algorithm for automatic identification of activity-rest periods based\n",
      " |      on actigraphy, developped by Crespo et al. [1]_.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      zeta: int\n",
      " |          Maximum number of consecutive zeroes considered valid.\n",
      " |          Default is 15.\n",
      " |      zeta_r: int\n",
      " |          Maximum number of consecutive zeroes considered valid (rest).\n",
      " |          Default is 30.\n",
      " |      zeta_a: int\n",
      " |          Maximum number of consecutive zeroes considered valid (active).\n",
      " |          Default is 2.\n",
      " |      t: float\n",
      " |          Percentile for invalid zeroes.\n",
      " |          Default is 0.33.\n",
      " |      alpha: offset\n",
      " |          Average hours of sleep per night.\n",
      " |          Default is '8h'.\n",
      " |      beta: offset\n",
      " |          Length of the padding sequence used during the processing.\n",
      " |          Default is '1h'.\n",
      " |      estimate_zeta: Boolean\n",
      " |          If set to True, zeta values are estimated from the distribution of\n",
      " |          ratios of the number of series of consecutive zeroes to\n",
      " |          the number of series randomly chosen from the actigraphy data.\n",
      " |          Default is False.\n",
      " |      seq_length_max: int\n",
      " |          Maximal length of the aforementioned random series.\n",
      " |          Default is 100.\n",
      " |      verbose:\n",
      " |          If set to True, print the estimated values of zeta.\n",
      " |          Default is False.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      aot : (ndarray, ndarray)\n",
      " |          Arrays containing the estimated activity onset and offset times,\n",
      " |          respectively.\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Crespo, C., Aboy, M., FernÃ¡ndez, J. R., & MojÃ³n, A. (2012).\n",
      " |             Automatic identification of activityâ€“rest periods based on\n",
      " |             actigraphy. Medical & Biological Engineering & Computing, 50(4),\n",
      " |             329â€“340. http://doi.org/10.1007/s11517-012-0875-y\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |  \n",
      " |  Oakley(self, threshold=40)\n",
      " |      Oakley's algorithm for sleep/wake scoring.\n",
      " |      \n",
      " |      Algorithm for automatic sleep/wake scoring based on wrist activity,\n",
      " |      developed by Oakley [1]_.\n",
      " |      \n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      threshold: float or str, optional\n",
      " |          Threshold value for scoring sleep/wake. Can be set to \"automatic\"\n",
      " |          (cf. Notes).\n",
      " |          Default is 40.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      \n",
      " |      oakley: pandas.core.Series\n",
      " |          Time series containing scores (1: sleep, 0: wake) for each\n",
      " |          epoch.\n",
      " |      \n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      The output variable O of Oakley's algorithm is defined as:\n",
      " |      \n",
      " |      .. math::\n",
      " |      \n",
      " |          O = (\n",
      " |              [W_{-2},W_{-1},W_{0},W_{+1},W_{+2}]\n",
      " |              \\cdot\n",
      " |              [A_{-2},A_{-1},A_{0},A_{+1},A_{+2}])\n",
      " |      \n",
      " |      with:\n",
      " |      \n",
      " |      * O <= threshold == sleep, 0 > threshold == wake;\n",
      " |      * :math:`W_{0},W_{-1},W_{+1},\\dots`, weighting factors for the present\n",
      " |        epoch, the previous epoch, the following epoch, etc.;\n",
      " |      * :math:`A_{0},A_{-1},A_{+1},\\dots`, activity scores for the present\n",
      " |        epoch, the previous epoch, the following epoch, etc.\n",
      " |      \n",
      " |      \n",
      " |      The current implementation of this algorithm follows the description\n",
      " |      provided in the instruction manual of the Actiwatch Communication and\n",
      " |      Sleep Analysis Software (Respironics, Inc.) [2]_ :\n",
      " |      \n",
      " |      * 15-second sampling frequency:\n",
      " |          .. math::\n",
      " |      \n",
      " |              W_{-8} &= \\ldots = W_{-5} = W_{+5} = \\ldots = W_{+8} = 1/25 \\\\\n",
      " |              W_{-4} &= \\ldots = W_{-1} = W_{+1} = \\ldots = W_{+4} = 1/5 \\\\\n",
      " |              W_{0} &= 4\n",
      " |      \n",
      " |      * 30-second sampling frequency:\n",
      " |          .. math::\n",
      " |      \n",
      " |              W_{-4} &= W_{-3} = W_{+3} = W_{+4} = 1/25 \\\\\n",
      " |              W_{-2} &= W_{-1} = W_{+1} = W_{+2} = 1/5 \\\\\n",
      " |              W_{0} &= 2\n",
      " |      \n",
      " |      * 60-second sampling frequency:\n",
      " |          .. math::\n",
      " |      \n",
      " |              W_{-2} &= W_{+2} = 1/25 \\\\\n",
      " |              W_{-1} &= W_{+1} = 1/5 \\\\\n",
      " |              W_{0} &= 1\n",
      " |      \n",
      " |      * 120-second sampling frequency:\n",
      " |          .. math::\n",
      " |      \n",
      " |              W_{-1} &= W_{+1} = 1/8 \\\\\n",
      " |              W_{0} &= 1/2\n",
      " |      \n",
      " |      \n",
      " |      The *Automatic Wake Threshold Value* calculation is this [2]_:\n",
      " |      \n",
      " |      1. Sum the activity counts for all epochs of the data set.\n",
      " |      2. Count the number of epochs scored as MOBILE for the data set\n",
      " |         (the definition of MOBILE follows).\n",
      " |      3. Compute the MOBILE TIME (number of epochs scored as MOBILE from\n",
      " |         step 2 multiplied by the Epoch Length) in minutes.\n",
      " |      4. Compute the Auto Wake Threshold = ((sum of activity counts from\n",
      " |         step 1) divided by (MOBILE TIME from step 3)) multiplied by 0.88888.\n",
      " |      \n",
      " |      \n",
      " |      *Definition of Mobile* [2]_:\n",
      " |      \n",
      " |      An epoch is scored as MOBILE if the number of activity counts recorded\n",
      " |      in that epoch is greater than or equal to the epoch length in 15-second\n",
      " |      intervals. For example,there are four 15-second intervals for a\n",
      " |      1-minute epoch length; hence, the activity value in an epoch must be\n",
      " |      greater than, or equal to, four, to be scored as MOBILE.\n",
      " |      \n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Oakley, N.R. Validation with Polysomnography of the Sleepwatch\n",
      " |             Sleep/Wake Scoring Algorithm Used by the Actiwatch Activity\n",
      " |             Monitoring System; Technical Report; Mini-Mitter: Bend, OR, USA,\n",
      " |             1997\n",
      " |      .. [2] Instruction manual, Actiwatch Communication and Sleep Analysis\n",
      " |             Software\n",
      " |             (https://fccid.io/JIAAWR1/Users-Manual/USERS-MANUAL-1-920937)\n",
      " |  \n",
      " |  Roenneberg(self, trend_period='24h', min_trend_period='12h', threshold=0.15, min_seed_period='30Min', max_test_period='12h', n_succ=3)\n",
      " |      Automatic sleep detection.\n",
      " |      \n",
      " |      Identification of consolidated sleep episodes using the\n",
      " |      algorithm developped by Roenneberg et al. [1]_.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      trend_period: str, optional\n",
      " |          Time period of the rolling window used to extract the data trend.\n",
      " |          Default is '24h'.\n",
      " |      min_trend_period: str, optional\n",
      " |          Minimum time period required for the rolling window to produce a\n",
      " |          value. Values default to NaN otherwise.\n",
      " |          Default is '12h'.\n",
      " |      threshold: float, optional\n",
      " |          Fraction of the trend to use as a threshold for sleep/wake\n",
      " |          categorization.\n",
      " |          Default is '0.15'\n",
      " |      min_seed_period: str, optional\n",
      " |          Minimum time period required to identify a potential sleep onset.\n",
      " |          Default is '30Min'.\n",
      " |      max_test_period : str, optional\n",
      " |          Maximal period of the test series.\n",
      " |          Default is '12h'\n",
      " |      n_succ : int, optional\n",
      " |          Number of successive elements to consider when searching for the\n",
      " |          maximum correlation peak.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      rbg : pandas.core.Series\n",
      " |          Time series containing the estimated periods of rest (1) and\n",
      " |          activity (0).\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Roenneberg, T., Keller, L. K., Fischer, D., Matera, J. L.,\n",
      " |             Vetter, C., & Winnebeck, E. C. (2015). Human Activity and Rest\n",
      " |             In Situ. In Methods in Enzymology (Vol. 552, pp. 257-283).\n",
      " |             http://doi.org/10.1016/bs.mie.2014.11.028\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |  \n",
      " |  Roenneberg_AoT(self, trend_period='24h', min_trend_period='12h', threshold=0.15, min_seed_period='30Min', max_test_period='12h', n_succ=3)\n",
      " |      Automatic identification of activity onset/offset times, based on\n",
      " |      Roenneberg's algorithm.\n",
      " |      \n",
      " |      Identification of the activity onset and offset times using the\n",
      " |      algorithm for automatic identification of consolidated sleep episodes\n",
      " |      developped by Roenneberg et al. [1]_.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      trend_period: str, optional\n",
      " |          Time period of the rolling window used to extract the data trend.\n",
      " |          Default is '24h'.\n",
      " |      min_trend_period: str, optional\n",
      " |          Minimum time period required for the rolling window to produce a\n",
      " |          value. Values default to NaN otherwise.\n",
      " |          Default is '12h'.\n",
      " |      threshold: float, optional\n",
      " |          Fraction of the trend to use as a threshold for sleep/wake\n",
      " |          categorization.\n",
      " |          Default is '0.15'\n",
      " |      min_seed_period: str, optional\n",
      " |          Minimum time period required to identify a potential sleep onset.\n",
      " |          Default is '30Min'.\n",
      " |      max_test_period : str, optional\n",
      " |          Maximal period of the test series.\n",
      " |          Default is '12h'.\n",
      " |      n_succ : int, optional\n",
      " |          Number of successive elements to consider when searching for the\n",
      " |          maximum correlation peak.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      aot : (ndarray, ndarray)\n",
      " |          Arrays containing the estimated activity onset and offset times,\n",
      " |          respectively.\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Roenneberg, T., Keller, L. K., Fischer, D., Matera, J. L.,\n",
      " |             Vetter, C., & Winnebeck, E. C. (2015). Human Activity and Rest\n",
      " |             In Situ. In Methods in Enzymology (Vol. 552, pp. 257-283).\n",
      " |             http://doi.org/10.1016/bs.mie.2014.11.028\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |  \n",
      " |  Sadeh(self, offset=7.601, weights=array([-0.065, -1.08 , -0.056, -0.703]), threshold=0.0)\n",
      " |      Sadeh algorithm for sleep identification\n",
      " |      \n",
      " |      Algorithm for automatic sleep scoring based on wrist activity,\n",
      " |      developped by Sadeh et al [1]_.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      offset: float, optional\n",
      " |          Offset parameter.\n",
      " |          Default is 7.601.\n",
      " |      weights: np.array\n",
      " |          Array of weighting factors for mean_W5, NAT, sd_Last6 and logAct.\n",
      " |          Default is [-0.065, -1.08, -0.056, -0.703].\n",
      " |      threshold: float, optional\n",
      " |          Threshold value for scoring sleep/wake.\n",
      " |          Default is 0.0.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      The output variable PS of the Sadeh algorithm is defined in [2]_ as:\n",
      " |      \n",
      " |      .. math::\n",
      " |      \n",
      " |          PS = 7.601-0.065Â·mean_W5-1.08Â·NAT-0.056Â·sd_Last6-0.703Â·logAct\n",
      " |      \n",
      " |      with:\n",
      " |      \n",
      " |      * PS >= 0 == sleep, PS < 0 == wake;\n",
      " |      * mean_W5, the average number of activity counts during the scored\n",
      " |        epoch and the window of five epochs preceding and following it;\n",
      " |      * sd_Last6, the standard deviation of the activity counts during\n",
      " |        the scored epoch and the five epochs preceding it;\n",
      " |      * NAT, the number of epochs with activity level equal to or higher\n",
      " |        than 50 but lower than 100 activity counts in a window of 11 minutes\n",
      " |        that includes the scored epoch and the five epochs preceding and\n",
      " |        following it;\n",
      " |      * logAct, the natural logarithm of the number of activity counts during\n",
      " |        the scored epoch + 1.\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Sadeh, A., Alster, J., Urbach, D., & Lavie, P. (1989).\n",
      " |             Actigraphically based automatic bedtime sleep-wake scoring:\n",
      " |             validity and clinical applications.\n",
      " |             Journal of ambulatory monitoring, 2(3), 209-216.\n",
      " |      .. [2] Sadeh, A., Sharkey, M., & Carskadon, M. A. (1994).\n",
      " |             Activity-Based Sleep-Wake Identification: An Empirical Test of\n",
      " |             Methodological Issues. Sleep, 17(3), 201â€“207.\n",
      " |             http://doi.org/10.1093/sleep/17.3.201\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |  \n",
      " |  Scripps(self, scale=0.204, window=array([0.0064, 0.0074, 0.0112, 0.0112, 0.0118, 0.0118, 0.0128, 0.0188,\n",
      " |         0.028 , 0.0664, 0.03  , 0.0112, 0.01  , 0.    , 0.    , 0.    ,\n",
      " |         0.    , 0.    , 0.    , 0.    , 0.    ]), threshold=1.0)\n",
      " |      Scripps Clinic algorithm for sleep-wake identification.\n",
      " |      \n",
      " |      Algorithm for automatic sleep scoring based on wrist activity,\n",
      " |      developed by Kripke et al [1]_.\n",
      " |      \n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      scale: float, optional\n",
      " |          Scale parameter P\n",
      " |          Default is 0.204.\n",
      " |      window: np.array, optional\n",
      " |          Array of weighting factors :math:`W_{i}`\n",
      " |          Default values are identical to those found in the original\n",
      " |          publication [1]_.\n",
      " |      threshold: float, optional\n",
      " |          Threshold value for scoring sleep/wake.\n",
      " |          Default is 1.0.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      \n",
      " |      scripps: pandas.core.Series\n",
      " |          Time series containing the `D` scores (0: sleep, 1: wake) for each\n",
      " |          epoch.\n",
      " |      \n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      The output variable D of the Scripps algorithm is defined in [1]_ as:\n",
      " |      \n",
      " |      .. math::\n",
      " |      \n",
      " |          D = P*(\n",
      " |              [W_{-10},\\dots,W_{0},\\dots,W_{+10}]\n",
      " |              \\cdot\n",
      " |              [A_{-10},\\dots,A_{0},\\dots,A_{+10}])\n",
      " |      \n",
      " |      with:\n",
      " |      \n",
      " |      * D < 1 == sleep, D >= 1 == wake;\n",
      " |      * P, scale factor;\n",
      " |      * :math:`W_{0},W_{-1},W_{+1},\\dots`, weighting factors for the present\n",
      " |        epoch, the previous epoch, the following epoch, etc.;\n",
      " |      * :math:`A_{0},A_{-1},A_{+1},\\dots`, activity scores for the present\n",
      " |        epoch, the previous epoch, the following epoch, etc.\n",
      " |      \n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Kripke, D. F., Hahn, E. K., Grizas, A. P., Wadiak, K. H.,\n",
      " |             Loving, R. T., Poceta, J. S., â€¦ Kline, L. E. (2010).\n",
      " |             Wrist actigraphic scoring for sleep laboratory patients:\n",
      " |             algorithm development. Journal of Sleep Research, 19(4),\n",
      " |             612â€“619. http://doi.org/10.1111/j.1365-2869.2010.00835.x\n",
      " |  \n",
      " |  SleepFragmentation(self)\n",
      " |      Sleep Fragmentation is an index of restlessness during the sleep\n",
      " |      period expressed as a percentage. The higher the index, the more sleep\n",
      " |      is disrupted. ActiLife calculates three values for sleep fragmentation:\n",
      " |      movement Index, a fragmentation index, and total sleep fragmentation\n",
      " |      Index.\n",
      " |      - The Movement Index (MI) is  the percentage of epochs with y-axis\n",
      " |      counts greater than zero in the sleep period.\n",
      " |      - The Fragmentation Index (FI) is the percentage of one minute periods\n",
      " |      of sleep vs. all periods of sleep during the sleep period.\n",
      " |      - The Total Sleep Fragmentation Index (SFI) is the sum of the MI and\n",
      " |      the FI\n",
      " |  \n",
      " |  SleepMidPoint(self, freq='15min', bin_threshold=None, to_td=True, algo='Roenneberg', *args, **kwargs)\n",
      " |      Sleep midpoint\n",
      " |      \n",
      " |      Center of the mean sleep periods\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      freq: str, optional\n",
      " |          Resampling frequency.\n",
      " |          Default is '15min'\n",
      " |      bin_threshold: bool, optional\n",
      " |          If bin_threshold is not set to None, scoring data above this\n",
      " |          threshold are set to 1 and to 0 otherwise.\n",
      " |          Default is None.\n",
      " |      to_td: bool, optional\n",
      " |          If set to true, the sleep midpoint is returned as a Timedelta.\n",
      " |          Otherwise, it represents the number of minutes since midnight.\n",
      " |      algo: str, optional\n",
      " |          Sleep scoring algorithm to use.\n",
      " |          Default is 'Roenneberg'.\n",
      " |      *args\n",
      " |          Variable length argument list passed to the scoring algorithm.\n",
      " |      **kwargs\n",
      " |          Arbitrary keyword arguements passed to the scoring algorithm.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      smp: float or Timedelta\n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      Sleep midpoint (SMP) is an index of sleep timing and is calculated\n",
      " |      as the following [1]_:\n",
      " |      \n",
      " |      .. math::\n",
      " |      \n",
      " |          SMP = \\frac{1440}{2\\pi} arctan2\\left(\n",
      " |                \\sum_{j=1}^M\\sum_{i=1}^N\n",
      " |                s_{i,j} \\times sin\\left(\\frac{2\\pi t_i}{1440}\\right),\n",
      " |                \\sum_{j=1}^M\\sum_{i=1}^N\n",
      " |                s_{i,j} \\times cos\\left(\\frac{2\\pi t_i}{1440}\\right)\n",
      " |                \\right)\n",
      " |      with:\n",
      " |          :math:`t_j`, time of day in minutes at epoch j,\n",
      " |          :math:`\\delta(s_{i,j}, s_{i+1,j}) = 1` if\n",
      " |          :math:`s_{i,j} = s_{i+1,j}` and 0 otherwise.\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Lunsford-Avery, J. R., Engelhard, M. M., Navar, A. M.,\n",
      " |             & Kollins, S. H. (2018). Validation of the Sleep Regularity\n",
      " |             Index in Older Adults and Associations with Cardiometabolic\n",
      " |             Risk. Scientific Reports, 8(1), 14158.\n",
      " |             https://doi.org/10.1038/s41598-018-32402-5\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |  \n",
      " |  SleepProfile(self, freq='15min', algo='Roenneberg', *args, **kwargs)\n",
      " |      Normalized sleep daily profile\n",
      " |      \n",
      " |      XXXXX\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      freq: str, optional\n",
      " |          Resampling frequency.\n",
      " |          Default is '15min'\n",
      " |      algo: str, optional\n",
      " |          Sleep scoring algorithm to use.\n",
      " |          Default is 'Roenneberg'.\n",
      " |      *args\n",
      " |          Variable length argument list passed to the scoring algorithm.\n",
      " |      **kwargs\n",
      " |          Arbitrary keyword arguements passed to the scoring algorithm.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      sleep_prof: YYY\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> raw.SleepProfile()\n",
      " |          ZZZZZZZZZZZZZZZZzZZZZZ\n",
      " |  \n",
      " |  SleepRegularityIndex(self, freq='15min', bin_threshold=None, algo='Roenneberg', *args, **kwargs)\n",
      " |      Sleep regularity index\n",
      " |      \n",
      " |      Likelihood that any two time-points (epoch-by-epoch) 24 hours apart are\n",
      " |      in the same sleep/wake state, across all days. This index is originally\n",
      " |      defined in [1]_ and validated in older adults in [2]_.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      freq: str, optional\n",
      " |          Resampling frequency.\n",
      " |          Default is '15min'\n",
      " |      bin_threshold: bool, optional\n",
      " |          If bin_threshold is not set to None, scoring data above this\n",
      " |          threshold are set to 1 and to 0 otherwise.\n",
      " |          Default is None.\n",
      " |      algo: str, optional\n",
      " |          Sleep scoring algorithm to use.\n",
      " |          Default is 'Roenneberg'.\n",
      " |      *args\n",
      " |          Variable length argument list passed to the scoring algorithm.\n",
      " |      **kwargs\n",
      " |          Arbitrary keyword arguements passed to the scoring algorithm.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      sri: float\n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      The sleep regularity index (SRI) is defined as:\n",
      " |      \n",
      " |      .. math::\n",
      " |      \n",
      " |          SRI = -100 + \\frac{200}{M(N-1)} \\sum_{j=1}^M\\sum_{i=1}^N\n",
      " |                \\delta(s_{i,j}, s_{i+1,j})\n",
      " |      \n",
      " |      with:\n",
      " |          :math:`\\delta(s_{i,j}, s_{i+1,j}) = 1` if\n",
      " |          :math:`s_{i,j} = s_{i+1,j}` and 0 otherwise.\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Phillips, A. J. K., Clerx, W. M., Oâ€™Brien, C. S., Sano, A.,\n",
      " |             Barger, L. K., Picard, R. W., â€¦ Czeisler, C. A. (2017).\n",
      " |             Irregular sleep/wake patterns are associated with poorer\n",
      " |             academic performance and delayed circadian and sleep/wake\n",
      " |             timing. Scientific Reports, 7(1), 1â€“13.\n",
      " |             https://doi.org/10.1038/s41598-017-03171-4\n",
      " |      .. [2] Lunsford-Avery, J. R., Engelhard, M. M., Navar, A. M.,\n",
      " |             & Kollins, S. H. (2018). Validation of the Sleep Regularity\n",
      " |             Index in Older Adults and Associations with Cardiometabolic\n",
      " |             Risk. Scientific Reports, 8(1), 14158.\n",
      " |             https://doi.org/10.1038/s41598-018-32402-5\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |  \n",
      " |  SoD(self, freq='5min', binarize=True, bin_threshold=4, whs=4, start='12:00:00', period='5h', algo='Roenneberg', *args, **kwargs)\n",
      " |      Sleep over Daytime\n",
      " |      \n",
      " |      Quantify the volume of epochs identified as sleep over daytime (SoD),\n",
      " |      using sleep-wake scoring algorithms.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      freq: str, optional\n",
      " |          Resampling frequency.\n",
      " |          Default is '5min'\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized when determining the\n",
      " |          activity onset and offset times. Only valid if start='AonT' or\n",
      " |          'AoffT'.\n",
      " |          Default is True.\n",
      " |      bin_threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |          Default is 4.\n",
      " |      whs: int, optional\n",
      " |          Window half size. Only valid if start='AonT' or 'AoffT'.\n",
      " |          Default is 4\n",
      " |      start: str, optional\n",
      " |          Start time of the period of interest.\n",
      " |          Default: '12:00:00'\n",
      " |          Supported times: 'AonT', 'AoffT', any 'HH:MM:SS'\n",
      " |      period: str, optional\n",
      " |          Period length.\n",
      " |          Default is '5h'\n",
      " |      algo: str, optional\n",
      " |          Sleep scoring algorithm to use.\n",
      " |          Default is 'Roenneberg'.\n",
      " |      *args\n",
      " |          Variable length argument list passed to the scoring algorithm.\n",
      " |      **kwargs\n",
      " |          Arbitrary keyword arguements passed to the scoring algorithm.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      sod: pandas.core.Series\n",
      " |          Time series containing the epochs of rest (1) and\n",
      " |          activity (0) over the specified period.\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> SoD = rawAWD.SoD()\n",
      " |          >>> SoD\n",
      " |          2018-03-26 04:16:00    1\n",
      " |          2018-03-26 04:17:00    1\n",
      " |          2018-03-26 04:18:00    1\n",
      " |          (...)\n",
      " |          2018-04-05 16:59:00    0\n",
      " |          2018-04-05 16:59:00    0\n",
      " |          2018-04-05 17:00:00    0\n",
      " |          Length: 3175, dtype: int64\n",
      " |  \n",
      " |  fSoD(self, freq='5min', binarize=True, bin_threshold=4, whs=12, start='12:00:00', period='5h', algo='Roenneberg', *args, **kwargs)\n",
      " |      Fraction of Sleep over Daytime\n",
      " |      \n",
      " |      Fractional volume of epochs identified as sleep over daytime (SoD),\n",
      " |      using sleep-wake scoring algorithms.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      freq: str, optional\n",
      " |          Resampling frequency.\n",
      " |          Default is '5min'\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized when determining the\n",
      " |          activity onset and offset times. Only valid if start='AonT' or\n",
      " |          'AoffT'.\n",
      " |          Default is True.\n",
      " |      bin_threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |          Default is 4.\n",
      " |      whs: int, optional\n",
      " |          Window half size.\n",
      " |          Default is 4\n",
      " |      start: str, optional\n",
      " |          Start time of the period of interest.\n",
      " |          Default: '12:00:00'\n",
      " |          Supported times: 'AonT', 'AoffT', any 'HH:MM:SS'\n",
      " |      period: str, optional\n",
      " |          Period length.\n",
      " |          Default is '10h'\n",
      " |      algo: str, optional\n",
      " |          Sleep scoring algorithm to use.\n",
      " |          Default is 'Roenneberg'.\n",
      " |      *args\n",
      " |          Variable length argument list passed to the scoring algorithm.\n",
      " |      **kwargs\n",
      " |          Arbitrary keyword arguements passed to the scoring algorithm.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      fsod: float\n",
      " |          Fraction of epochs scored as sleep, relatively to the length of\n",
      " |          the specified period.\n",
      " |      \n",
      " |      .. warning:: The value of this variable depends on the convention used\n",
      " |                   by the underlying sleep scoring algorithm. The expected\n",
      " |                   convention is the following:\n",
      " |                  * epochs scored as 1 refer to inactivity/sleep\n",
      " |      \n",
      " |                  Otherwise, this variable will actually return the fraction\n",
      " |                  of epochs scored as activity. The fraction of sleep can\n",
      " |                  simply be recovered by calculating (1-fSOD).\n",
      " |      \n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> raw.fSoD()\n",
      " |          0.17763779527559054\n",
      " |          >>> raw.fSoD(algo='ck')\n",
      " |          0.23811023622047245\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from pyActigraphy.metrics.metrics.MetricsMixin:\n",
      " |  \n",
      " |  ADAT(self, binarize=True, threshold=4)\n",
      " |      Total average daily activity\n",
      " |      \n",
      " |      Calculate the total activity counts, averaged over all the days.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized.\n",
      " |          Default is True.\n",
      " |      threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      adat : int\n",
      " |  \n",
      " |  ADATp(self, period='7D', binarize=True, threshold=4, verbose=False)\n",
      " |      Total average daily activity per period\n",
      " |      \n",
      " |      Calculate the total activity counts, averaged over each consecutive\n",
      " |      period contained in the data. The number of periods\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      period: str, optional\n",
      " |          Time length of the period to be considered. Must be understandable\n",
      " |          by pandas.Timedelta\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized.\n",
      " |          Default is True.\n",
      " |      threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |      verbose: bool, optional\n",
      " |          If set to True, display the number of periods found in the data.\n",
      " |          Also display the time not accounted for.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      adatp : list of int\n",
      " |  \n",
      " |  IS(self, freq='1H', binarize=True, threshold=4)\n",
      " |      Interdaily stability\n",
      " |      \n",
      " |      The Interdaily stability (IS) quantifies the repeatibilty of the\n",
      " |      daily rest-activity pattern over each day contained in the activity\n",
      " |      recording.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      freq: str, optional\n",
      " |          Data resampling `frequency string\n",
      " |          <https://pandas.pydata.org/pandas-docs/stable/timeseries.html>`_.\n",
      " |          Default is '1H'.\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized.\n",
      " |          Default is True.\n",
      " |      threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |          Default is 4.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      is: float\n",
      " |      \n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      This variable is defined in ref [1]_:\n",
      " |      \n",
      " |      .. math::\n",
      " |      \n",
      " |          IS = \\frac{d^{24h}}{d^{1h}}\n",
      " |      \n",
      " |      with:\n",
      " |      \n",
      " |      .. math::\n",
      " |      \n",
      " |          d^{1h} = \\sum_{i}^{n}\\frac{\\left(x_{i}-\\bar{x}\\right)^{2}}{n}\n",
      " |      \n",
      " |      where :math:`x_{i}` is the number of active (counts higher than a\n",
      " |      predefined threshold) minutes during the :math:`i^{th}` period,\n",
      " |      :math:`\\bar{x}` is the mean of all data and :math:`n` is the number of\n",
      " |      periods covered by the actigraphy data and with:\n",
      " |      \n",
      " |      .. math::\n",
      " |      \n",
      " |          d^{24h} = \\sum_{i}^{p} \\frac{\n",
      " |                    \\left( \\bar{x}_{h,i} - \\bar{x} \\right)^{2}\n",
      " |                    }{p}\n",
      " |      \n",
      " |      where :math:`\\bar{x}^{h,i}` is the average number of active minutes\n",
      " |      over the :math:`i^{th}` period and :math:`p` is the number of periods\n",
      " |      per day. The average runs over all the days.\n",
      " |      \n",
      " |      For the record, tt is the 24h value from the chi-square periodogram\n",
      " |      (Sokolove and Bushel1 1978).\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Witting W., Kwa I.H., Eikelenboom P., Mirmiran M., Swaab D.F.\n",
      " |             Alterations in the circadian restâ€“activity rhythm in aging and\n",
      " |             Alzheimer×³s disease. Biol Psychiatry. 1990;27:563â€“572.\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> rawAWD.IS()\n",
      " |          0.6900175913031027\n",
      " |          >>> rawAWD.IS(freq='30min', binarize=True, threshold=4)\n",
      " |          0.6245582891144925\n",
      " |          >>> rawAWD.IS(freq='1H', binarize=False)\n",
      " |          0.5257020914453097\n",
      " |  \n",
      " |  ISm(self, freqs=['1T', '2T', '3T', '4T', '5T', '6T', '8T', '9T', '10T', '12T', '15T', '16T', '18T', '20T', '24T', '30T', '32T', '36T', '40T', '45T', '48T', '60T'], binarize=True, threshold=4)\n",
      " |      Average interdaily stability\n",
      " |      \n",
      " |      ISm [1]_ is the average of the IS values obtained with resampling\n",
      " |      periods divisors of 1440 between 1 and 60 min.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      freq: str, optional\n",
      " |          Data resampling `frequency strings\n",
      " |          <https://pandas.pydata.org/pandas-docs/stable/timeseries.html>`_.\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized.\n",
      " |          Default is True.\n",
      " |      threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |          Default is set to 4.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      ism: float\n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      By default, the resampling periods are 1, 2, 3, 4, 5, 6, 8, 9, 10, 12,\n",
      " |      15, 16, 18, 20, 24, 30, 32, 36, 40, 45, 48 and 60 min.\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] GonÃ§alves, B. S., Cavalcanti, P. R., Tavares, G. R.,\n",
      " |             Campos, T. F., & Araujo, J. F. (2014). Nonparametric methods in\n",
      " |             actigraphy: An update. Sleep science (Sao Paulo, Brazil), 7(3),\n",
      " |             158-64.\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> rawAWD.ISm()\n",
      " |          0.5758268227551039\n",
      " |          >>> rawAWD.ISm(binarize=False)\n",
      " |          0.3915874151855646\n",
      " |          >>> rawAWD.ISm(freqs=['10min','30min','1H'], binarize=False)\n",
      " |          0.44598210450842063\n",
      " |  \n",
      " |  ISp(self, period='7D', freq='1H', binarize=True, threshold=4, verbose=False)\n",
      " |      Interdaily stability per period\n",
      " |      \n",
      " |      The IS is calculated for each consecutive period found in the\n",
      " |      actigraphy recording.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      period: str, optional\n",
      " |          Time period for the calculation of IS\n",
      " |          Default is '7D'.\n",
      " |      freq: str, optional\n",
      " |          Data resampling `frequency string\n",
      " |          <https://pandas.pydata.org/pandas-docs/stable/timeseries.html>`_.\n",
      " |          Default is '1H'.\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized.\n",
      " |          Default is True.\n",
      " |      threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |          Default is 4.\n",
      " |      verbose: bool, optional\n",
      " |          If set to True, display the number of periods found in the activity\n",
      " |          recording, as well as the time not accounted for.\n",
      " |          Default is False.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      isp: list of float\n",
      " |      \n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      Periods are consecutive and all of the required duration. If the last\n",
      " |      consecutive period is shorter than required, the IS is not calculated\n",
      " |      for that period.\n",
      " |      \n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> rawAWD.duration()\n",
      " |          Timedelta('12 days 18:41:00')\n",
      " |          >>> rawAWD.ISp(period='5D',verbose=True)\n",
      " |          Number of periods: 2\n",
      " |          Time unaccounted for: 2 days, 19h, 0m, 0s\n",
      " |          [0.7565263007902066, 0.866544730769211]\n",
      " |  \n",
      " |  IV(self, freq='1H', binarize=True, threshold=4)\n",
      " |      Intradaily variability\n",
      " |      \n",
      " |      The Intradaily Variability (IV) quantifies the variability of the\n",
      " |      activity recording. This variable thus measures the rest or activity\n",
      " |      fragmentation.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      freq: str, optional\n",
      " |          Data resampling `frequency string\n",
      " |          <https://pandas.pydata.org/pandas-docs/stable/timeseries.html>`_.\n",
      " |          Default is '1H'.\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized.\n",
      " |          Default is True.\n",
      " |      threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |          Default is 4.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      iv: float\n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      It is defined in ref [1]_:\n",
      " |      \n",
      " |      .. math::\n",
      " |      \n",
      " |          IV = \\frac{c^{1h}}{d^{1h}}\n",
      " |      \n",
      " |      with:\n",
      " |      \n",
      " |      .. math::\n",
      " |      \n",
      " |          d^{1h} = \\sum_{i}^{n}\\frac{\\left(x_{i}-\\bar{x}\\right)^{2}}{n}\n",
      " |      \n",
      " |      where :math:`x_{i}` is the number of active (counts higher than a\n",
      " |      predefined threshold) minutes during the :math:`i^{th}` period,\n",
      " |      :math:`\\bar{x}` is the mean of all data and :math:`n` is the number of\n",
      " |      periods covered by the actigraphy data,\n",
      " |      \n",
      " |      and with:\n",
      " |      \n",
      " |      .. math::\n",
      " |      \n",
      " |          c^{1h} = \\sum_{i}^{n-1} \\frac{\n",
      " |                      \\left( x_{i+1} - x_{i} \\right)^{2}\n",
      " |                   }{n-1}\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Witting W., Kwa I.H., Eikelenboom P., Mirmiran M., Swaab D.F.\n",
      " |             Alterations in the circadian restâ€“activity rhythm in aging and\n",
      " |             Alzheimer×³s disease. Biol Psychiatry. 1990;27:563â€“572.\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> rawAWD.IV()\n",
      " |          0.46185426426324316\n",
      " |          >>> rawAWD.IV(freq='30min', binarize=True, threshold=4)\n",
      " |          0.4150769573937417\n",
      " |          >>> rawAWD.IV(freq='1H', binarize=False)\n",
      " |          0.7859579446494547\n",
      " |  \n",
      " |  IVm(self, freqs=['1T', '2T', '3T', '4T', '5T', '6T', '8T', '9T', '10T', '12T', '15T', '16T', '18T', '20T', '24T', '30T', '32T', '36T', '40T', '45T', '48T', '60T'], binarize=True, threshold=4)\n",
      " |      Average intradaily variability\n",
      " |      \n",
      " |      IVm [1]_ is the average of the IV values obtained with resampling\n",
      " |      periods divisors of 1440 between 1 and 60 min.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      freq: str, optional\n",
      " |          Data resampling `frequency strings\n",
      " |          <https://pandas.pydata.org/pandas-docs/stable/timeseries.html>`_.\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized.\n",
      " |          Default is True.\n",
      " |      threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |          Default is set to 4.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      ivm: float\n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      By default, the resampling periods are 1, 2, 3, 4, 5, 6, 8, 9, 10, 12,\n",
      " |      15, 16, 18, 20, 24, 30, 32, 36, 40, 45, 48 and 60 min.\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] GonÃ§alves, B. S., Cavalcanti, P. R., Tavares, G. R.,\n",
      " |             Campos, T. F., & Araujo, J. F. (2014). Nonparametric methods in\n",
      " |             actigraphy: An update. Sleep science (Sao Paulo, Brazil), 7(3),\n",
      " |             158-64.\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> rawAWD.IVm()\n",
      " |          0.3482306825356382\n",
      " |          >>> rawAWD.IVm(binarize=False)\n",
      " |          0.6414533006190071\n",
      " |          >>> rawAWD.IVm(freqs=['10min','30min','1H'], binarize=False)\n",
      " |          0.7124465677737196\n",
      " |  \n",
      " |  IVp(self, period='7D', freq='1H', binarize=True, threshold=4, verbose=False)\n",
      " |      Intradaily variability per period\n",
      " |      \n",
      " |      The IV is calculated for each consecutive period found in the\n",
      " |      actigraphy recording.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      period: str, optional\n",
      " |          Time period for the calculation of IS\n",
      " |          Default is '7D'.\n",
      " |      freq: str, optional\n",
      " |          Data resampling `frequency string\n",
      " |          <https://pandas.pydata.org/pandas-docs/stable/timeseries.html>`_.\n",
      " |          Default is '1H'.\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized.\n",
      " |          Default is True.\n",
      " |      threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |          Default is 4.\n",
      " |      verbose: bool, optional\n",
      " |          If set to True, display the number of periods found in the activity\n",
      " |          recording, as well as the time not accounted for.\n",
      " |          Default is False.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      ivp: list of float\n",
      " |      \n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      Periods are consecutive and all of the required duration. If the last\n",
      " |      consecutive period is shorter than required, the IV is not calculated\n",
      " |      for that period.\n",
      " |      \n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> rawAWD.duration()\n",
      " |          Timedelta('12 days 18:41:00')\n",
      " |          >>> rawAWD.IVp(period='5D',verbose=True)\n",
      " |          Number of periods: 2\n",
      " |          Time unaccounted for: 2 days, 19h, 0m, 0s\n",
      " |          [0.4011232866522594, 0.5340044506337185]\n",
      " |  \n",
      " |  L5(self, binarize=True, threshold=4)\n",
      " |      L5\n",
      " |      \n",
      " |      Mean activity during the 5 least active hours of the day.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized.\n",
      " |          Default is True.\n",
      " |      threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |          Default is 4.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      l5: float\n",
      " |      \n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      The L5 [1]_ variable is calculated as the mean, per acquisition period,\n",
      " |      of the average daily activities during the 5 least active hours.\n",
      " |      \n",
      " |      .. warning:: The value of this variable depends on the length of the\n",
      " |                   acquisition period.\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Van Someren, E.J.W., Lijzenga, C., Mirmiran, M., Swaab, D.F.\n",
      " |             (1997). Long-Term Fitness Training Improves the Circadian\n",
      " |             Rest-Activity Rhythm in Healthy Elderly Males.\n",
      " |             Journal of Biological Rhythms, 12(2), 146â€“156.\n",
      " |             http://doi.org/10.1177/074873049701200206\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> rawAWD.L5()\n",
      " |          0.XXXX\n",
      " |          >>> rawAWD.L5(binarize=False)\n",
      " |          0.XXXX\n",
      " |  \n",
      " |  L5p(self, period='7D', binarize=True, threshold=4, verbose=False)\n",
      " |      L5 per period\n",
      " |      \n",
      " |      The L5 variable is calculated for each consecutive period found in the\n",
      " |      actigraphy recording.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      period: str, optional\n",
      " |          Time period for the calculation of IS\n",
      " |          Default is '7D'.\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized.\n",
      " |          Default is True.\n",
      " |      threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |          Default is 4.\n",
      " |      verbose: bool, optional\n",
      " |          If set to True, display the number of periods found in the activity\n",
      " |          recording, as well as the time not accounted for.\n",
      " |          Default is False.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      l5p: list of float\n",
      " |      \n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      The L5 [1]_ variable is calculated as the mean, per acquisition period,\n",
      " |      of the average daily activities during the 5 least active hours.\n",
      " |      \n",
      " |      .. warning:: The value of this variable depends on the length of the\n",
      " |                   acquisition period.\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Van Someren, E.J.W., Lijzenga, C., Mirmiran, M., Swaab, D.F.\n",
      " |             (1997). Long-Term Fitness Training Improves the Circadian\n",
      " |             Rest-Activity Rhythm in Healthy Elderly Males.\n",
      " |             Journal of Biological Rhythms, 12(2), 146â€“156.\n",
      " |             http://doi.org/10.1177/074873049701200206\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> rawAWD.duration()\n",
      " |          Timedelta('12 days 18:41:00')\n",
      " |          >>> rawAWD.L5p(period='5D',verbose=True)\n",
      " |          Number of periods: 2\n",
      " |          Time unaccounted for: 2 days, 19h, 0m, 0s\n",
      " |          [0.XXXX, 0.XXXX]\n",
      " |  \n",
      " |  M10(self, binarize=True, threshold=4)\n",
      " |      M10\n",
      " |      \n",
      " |      Mean activity during the 10 most active hours of the day.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized.\n",
      " |          Default is True.\n",
      " |      threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |          Default is 4.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      m10: float\n",
      " |      \n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      The M10 [1]_ variable is calculated as the mean, per acquisition period\n",
      " |      , of the average daily activities during the 10 most active hours.\n",
      " |      \n",
      " |      .. warning:: The value of this variable depends on the length of the\n",
      " |                   acquisition period.\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Van Someren, E.J.W., Lijzenga, C., Mirmiran, M., Swaab, D.F.\n",
      " |             (1997). Long-Term Fitness Training Improves the Circadian\n",
      " |             Rest-Activity Rhythm in Healthy Elderly Males.\n",
      " |             Journal of Biological Rhythms, 12(2), 146â€“156.\n",
      " |             http://doi.org/10.1177/074873049701200206\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> rawAWD.M10()\n",
      " |          0.XXXX\n",
      " |          >>> rawAWD.M10(binarize=False)\n",
      " |          0.XXXX\n",
      " |  \n",
      " |  M10p(self, period='7D', binarize=True, threshold=4, verbose=False)\n",
      " |      M10 per period\n",
      " |      \n",
      " |      The M10 variable is calculated for each consecutive period found in the\n",
      " |      actigraphy recording.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      period: str, optional\n",
      " |          Time period for the calculation of IS\n",
      " |          Default is '7D'.\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized.\n",
      " |          Default is True.\n",
      " |      threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |          Default is 4.\n",
      " |      verbose: bool, optional\n",
      " |          If set to True, display the number of periods found in the activity\n",
      " |          recording, as well as the time not accounted for.\n",
      " |          Default is False.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      m10p: list of float\n",
      " |      \n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      The M10 [1]_ variable is calculated as the mean, per acquisition period\n",
      " |      , of the average daily activities during the 10 most active hours.\n",
      " |      \n",
      " |      .. warning:: The value of this variable depends on the length of the\n",
      " |                   acquisition period.\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Van Someren, E.J.W., Lijzenga, C., Mirmiran, M., Swaab, D.F.\n",
      " |             (1997). Long-Term Fitness Training Improves the Circadian\n",
      " |             Rest-Activity Rhythm in Healthy Elderly Males.\n",
      " |             Journal of Biological Rhythms, 12(2), 146â€“156.\n",
      " |             http://doi.org/10.1177/074873049701200206\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> rawAWD.duration()\n",
      " |          Timedelta('12 days 18:41:00')\n",
      " |          >>> rawAWD.M10p(period='5D',verbose=True)\n",
      " |          Number of periods: 2\n",
      " |          Time unaccounted for: 2 days, 19h, 0m, 0s\n",
      " |          [0.XXXX, 0.XXXX]\n",
      " |  \n",
      " |  RA(self, binarize=True, threshold=4)\n",
      " |      Relative rest/activity amplitude\n",
      " |      \n",
      " |      Relative amplitude between the mean activity during the 10 most active\n",
      " |      hours of the day and the mean activity during the 5 least active hours\n",
      " |      of the day.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized.\n",
      " |          Default is True.\n",
      " |      threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |          Default is 4.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      ra: float\n",
      " |      \n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      The RA [1]_ variable is calculated as:\n",
      " |      \n",
      " |      .. math::\n",
      " |      \n",
      " |          RA = \\frac{M10 - L5}{M10 + L5}\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Van Someren, E.J.W., Lijzenga, C., Mirmiran, M., Swaab, D.F.\n",
      " |             (1997). Long-Term Fitness Training Improves the Circadian\n",
      " |             Rest-Activity Rhythm in Healthy Elderly Males.\n",
      " |             Journal of Biological Rhythms, 12(2), 146â€“156.\n",
      " |             http://doi.org/10.1177/074873049701200206\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> rawAWD.RA()\n",
      " |          0.XXXX\n",
      " |          >>> rawAWD.RA(binarize=False)\n",
      " |          0.XXXX\n",
      " |  \n",
      " |  RAp(self, period='7D', binarize=True, threshold=4, verbose=False)\n",
      " |      RA per period\n",
      " |      \n",
      " |      The RA variable is calculated for each consecutive period found in the\n",
      " |      actigraphy recording.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      period: str, optional\n",
      " |          Time period for the calculation of IS\n",
      " |          Default is '7D'.\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized.\n",
      " |          Default is True.\n",
      " |      threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |          Default is 4.\n",
      " |      verbose: bool, optional\n",
      " |          If set to True, display the number of periods found in the activity\n",
      " |          recording, as well as the time not accounted for.\n",
      " |          Default is False.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      rap: list of float\n",
      " |      \n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      The RA [1]_ variable is calculated as:\n",
      " |      \n",
      " |      .. math::\n",
      " |      \n",
      " |          RA = \\frac{M10 - L5}{M10 + L5}\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Van Someren, E.J.W., Lijzenga, C., Mirmiran, M., Swaab, D.F.\n",
      " |             (1997). Long-Term Fitness Training Improves the Circadian\n",
      " |             Rest-Activity Rhythm in Healthy Elderly Males.\n",
      " |             Journal of Biological Rhythms, 12(2), 146â€“156.\n",
      " |             http://doi.org/10.1177/074873049701200206\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> rawAWD.duration()\n",
      " |          Timedelta('12 days 18:41:00')\n",
      " |          >>> rawAWD.RAp(period='5D',verbose=True)\n",
      " |          Number of periods: 2\n",
      " |          Time unaccounted for: 2 days, 19h, 0m, 0s\n",
      " |          [0.XXXX, 0.XXXX]\n",
      " |  \n",
      " |  average_daily_activity(self, freq='5min', cyclic=False, binarize=True, threshold=4, time_origin=None, whs='1h')\n",
      " |      Average daily activity distribution\n",
      " |      \n",
      " |      Calculate the daily profile of activity. Data are averaged over all the\n",
      " |      days.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      freq: str, optional\n",
      " |          Data resampling frequency.\n",
      " |          Cf. #timeseries-offset-aliases in\n",
      " |          <https://pandas.pydata.org/pandas-docs/stable/timeseries.html>.\n",
      " |      cyclic: bool, optional\n",
      " |          If set to True, two daily profiles are concatenated to ensure\n",
      " |          continuity between the last point of the day and the first one.\n",
      " |          Default is False.\n",
      " |      binarize: bool, optional\n",
      " |          If set to True, the data are binarized.\n",
      " |          Default is True.\n",
      " |      threshold: int, optional\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |      time_origin: str or pd.Timedelta, optional\n",
      " |          If not None, origin of the time axis for the daily profile.\n",
      " |          Original time bins are translated as time delta with respect to\n",
      " |          this new origin.\n",
      " |          Default is None\n",
      " |          Supported time string: 'AonT', 'AoffT', any 'HH:MM:SS'\n",
      " |      whs: str, optional\n",
      " |          Window half size parameter for the detection of the activity\n",
      " |          onset/offset time. Relevant only if time_origin is set to\n",
      " |          'AonT' or AoffT'.\n",
      " |          Default is '1h'.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      raw : pandas.Series\n",
      " |          A Series containing the daily activity profile with a 24h index.\n",
      " |  \n",
      " |  average_daily_light(self, freq='5min', cyclic=False)\n",
      " |      Average daily light distribution\n",
      " |      \n",
      " |      Calculate the daily profile of light exposure (in lux). Data are\n",
      " |      averaged over all the days.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      freq: str, optional\n",
      " |          Data resampling frequency.\n",
      " |          Cf. #timeseries-offset-aliases in\n",
      " |          <https://pandas.pydata.org/pandas-docs/stable/timeseries.html>.\n",
      " |      cyclic: bool, optional\n",
      " |          If set to True, two daily profiles are concatenated to ensure\n",
      " |          continuity between the last point of the day and the first one.\n",
      " |          Default is False.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      raw : pandas.Series\n",
      " |          A Series containing the daily profile of light exposure with a 24h\n",
      " |          index.\n",
      " |  \n",
      " |  kAR(self, threshold, start=None, period=None, frac=0.3, it=0, logit=False, freq=None, offset='15min')\n",
      " |      Rest->Activity transition probability\n",
      " |      \n",
      " |      Weighted average value of pAR(t) within the constant regions, defined\n",
      " |      as the longest stretch within which the LOWESS curve varied by no more\n",
      " |      than 1 standard deviation of the pAR(t) curve [1]_.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      threshold: int\n",
      " |          Above this threshold, data are classified as active (1) and as\n",
      " |          rest (0) otherwise.\n",
      " |      start: str, optional\n",
      " |          If not None, the actigraphy recording is truncated to\n",
      " |          'start:start+period', each day. Start string format: 'HH:MM:SS'.\n",
      " |          Special keywords ('AonT' or 'AoffT') are allowed. In this case, the\n",
      " |          start is set to the activity onset ('AonT') or offset ('AoffT')\n",
      " |          time derived from the daily profile. Cf sleep.AonT/AoffT functions\n",
      " |          for more informations.\n",
      " |          Default is None\n",
      " |      period: str, optional\n",
      " |          Time period for the calculation of pRA.\n",
      " |          Default is None.\n",
      " |      frac: float\n",
      " |          Fraction of the data used when estimating each value.\n",
      " |          Default is 0.3.\n",
      " |      it: int\n",
      " |          Number of residual-based reweightings to perform.\n",
      " |          Default is 0.\n",
      " |      logit: bool, optional\n",
      " |          If True, the kRA value is logit-transformed (ln(p/1-p)). Useful\n",
      " |          when kRA is used in a regression model.\n",
      " |          Default is False.\n",
      " |      freq: str, optional\n",
      " |          Data resampling `frequency string\n",
      " |          <https://pandas.pydata.org/pandas-docs/stable/timeseries.html>`_\n",
      " |          applied to the daily profile if start='AonT' or 'AoffT'.\n",
      " |          Default is None.\n",
      " |      offset: str, optional\n",
      " |          Time offset with respect to the activity onset and offset times\n",
      " |          used as start times.\n",
      " |          Default is '15min'.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      kar: float\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Lim, A. S. P., Yu, L., Costa, M. D., Buchman, A. S.,\n",
      " |             Bennett, D. A., Leurgans, S. E., & Saper, C. B. (2011).\n",
      " |             Quantification of the Fragmentation of Rest-Activity Patterns in\n",
      " |             Elderly Individuals Using a State Transition Analysis. Sleep,\n",
      " |             34(11), 1569â€“1581. http://doi.org/10.5665/sleep.1400\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> rawAWD.kAR(4)\n",
      " |          0.041397590252332916\n",
      " |          >>> rawAWD.kAR(4, start='08:00:00', period='12H')\n",
      " |          0.04372712642257519\n",
      " |  \n",
      " |  kRA(self, threshold, start=None, period=None, frac=0.3, it=0, logit=False, freq=None, offset='15min')\n",
      " |      Rest->Activity transition probability\n",
      " |      \n",
      " |      Weighted average value of pRA(t) within the constant regions, defined\n",
      " |      as the longest stretch within which the LOWESS curve varied by no more\n",
      " |      than 1 standard deviation of the pRA(t) curve [1]_.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      threshold: int\n",
      " |          Above this threshold, data are classified as active (1) and as\n",
      " |          rest (0) otherwise.\n",
      " |      start: str, optional\n",
      " |          If not None, the actigraphy recording is truncated to\n",
      " |          'start:start+period', each day. Start string format: 'HH:MM:SS'.\n",
      " |          Special keywords ('AonT' or 'AoffT') are allowed. In this case, the\n",
      " |          start is set to the activity onset ('AonT') or offset ('AoffT')\n",
      " |          time derived from the daily profile. Cf sleep.AonT/AoffT functions\n",
      " |          for more informations.\n",
      " |          Default is None\n",
      " |      period: str, optional\n",
      " |          Time period for the calculation of pRA.\n",
      " |          Default is None.\n",
      " |      frac: float, optional\n",
      " |          Fraction of the data used when estimating each value.\n",
      " |          Default is 0.3.\n",
      " |      it: int, optional\n",
      " |          Number of residual-based reweightings to perform.\n",
      " |          Default is 0.\n",
      " |      logit: bool, optional\n",
      " |          If True, the kRA value is logit-transformed (ln(p/1-p)). Useful\n",
      " |          when kRA is used in a regression model.\n",
      " |          Default is False.\n",
      " |      freq: str, optional\n",
      " |          Data resampling `frequency string\n",
      " |          <https://pandas.pydata.org/pandas-docs/stable/timeseries.html>`_\n",
      " |          applied to the daily profile if start='AonT' or 'AoffT'.\n",
      " |          Default is None.\n",
      " |      offset: str, optional\n",
      " |          Time offset with respect to the activity onset and offset times\n",
      " |          used as start times.\n",
      " |          Default is '15min'.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      kra: float\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Lim, A. S. P., Yu, L., Costa, M. D., Buchman, A. S.,\n",
      " |             Bennett, D. A., Leurgans, S. E., & Saper, C. B. (2011).\n",
      " |             Quantification of the Fragmentation of Rest-Activity Patterns in\n",
      " |             Elderly Individuals Using a State Transition Analysis. Sleep,\n",
      " |             34(11), 1569â€“1581. http://doi.org/10.5665/sleep.1400\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> rawAWD.kRA(4)\n",
      " |          0.09144435545010564\n",
      " |          >>> rawAWD.kRA(4, start='00:00:00', period='8H')\n",
      " |          0.13195826220778709\n",
      " |  \n",
      " |  pAR(self, threshold, start=None, period=None)\n",
      " |      Activity->Rest transition probability distribution\n",
      " |      \n",
      " |      Conditional probability, pAR(t), that an individual would be\n",
      " |      active at time (t+1) given that the individual had been continuously\n",
      " |      resting for the preceding t epochs, defined in [1]_ as:\n",
      " |      \n",
      " |      .. math::\n",
      " |          pAR(t) = p(R|A_t) = \\frac{N_t - N_{t+1}}{N_t}\n",
      " |      \n",
      " |      with :math:`N_t`, the total number of sequences of activity (i.e.\n",
      " |      activity above threshold) of duration :math:`t` or longer.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      threshold: int\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |      start: str, optional\n",
      " |          If not None, the actigraphy recording is truncated to\n",
      " |          'start:start+period', each day. Start string format: 'HH:MM:SS'.\n",
      " |          Default is None\n",
      " |      period: str, optional\n",
      " |          Time period for the calculation of pAR.\n",
      " |          Default is None.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      par: pandas.core.series.Series\n",
      " |          Transition probabilities (pAR(t)), calculated for all t values.\n",
      " |      par_weights: pandas.core.series.Series\n",
      " |          Weights are defined as the square root of the number of activity\n",
      " |          sequences contributing to each probability estimate.\n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      pAR is corrected for discontinuities due to sparse data, as defined in\n",
      " |      [1]_.\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Lim, A. S. P., Yu, L., Costa, M. D., Buchman, A. S.,\n",
      " |             Bennett, D. A., Leurgans, S. E., & Saper, C. B. (2011).\n",
      " |             Quantification of the Fragmentation of Rest-Activity Patterns in\n",
      " |             Elderly Individuals Using a State Transition Analysis. Sleep,\n",
      " |             34(11), 1569â€“1581. http://doi.org/10.5665/sleep.1400\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> pAR, pAR_weights = rawAWD.pAR(4, start='00:00:00', period='8H')\n",
      " |          >>> pAR\n",
      " |          counts\n",
      " |          1      0.169043\n",
      " |          2      0.144608\n",
      " |          3      0.163324\n",
      " |          (...)\n",
      " |          481    0.001157\n",
      " |          Name: counts, dtype: float64\n",
      " |  \n",
      " |  pRA(self, threshold, start=None, period=None)\n",
      " |      Rest->Activity transition probability distribution\n",
      " |      \n",
      " |      Conditional probability, pRA(t), that an individual would be\n",
      " |      resting at time (t+1) given that the individual had been continuously\n",
      " |      active for the preceding t epochs, defined in [1]_ as:\n",
      " |      \n",
      " |      .. math::\n",
      " |          pRA(t) = p(A|R_t) = \\frac{N_t - N_{t+1}}{N_t}\n",
      " |      \n",
      " |      with :math:`N_t`, the total number of sequences of rest (i.e. activity\n",
      " |      below threshold) of duration :math:`t` or longer.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      threshold: int\n",
      " |          If binarize is set to True, data above this threshold are set to 1\n",
      " |          and to 0 otherwise.\n",
      " |      start: str, optional\n",
      " |          If not None, the actigraphy recording is truncated to\n",
      " |          'start:start+period', each day. Start string format: 'HH:MM:SS'.\n",
      " |          Default is None\n",
      " |      period: str, optional\n",
      " |          Time period for the calculation of pRA.\n",
      " |          Default is None.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      pra: pandas.core.series.Series\n",
      " |          Transition probabilities (pRA(t)), calculated for all t values.\n",
      " |      pra_weights: pandas.core.series.Series\n",
      " |          Weights are defined as the square root of the number of activity\n",
      " |          sequences contributing to each probability estimate.\n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      \n",
      " |      pRA is corrected for discontinuities due to sparse data, as defined in\n",
      " |      [1]_.\n",
      " |      \n",
      " |      References\n",
      " |      ----------\n",
      " |      \n",
      " |      .. [1] Lim, A. S. P., Yu, L., Costa, M. D., Buchman, A. S.,\n",
      " |             Bennett, D. A., Leurgans, S. E., & Saper, C. B. (2011).\n",
      " |             Quantification of the Fragmentation of Rest-Activity Patterns in\n",
      " |             Elderly Individuals Using a State Transition Analysis. Sleep,\n",
      " |             34(11), 1569â€“1581. http://doi.org/10.5665/sleep.1400\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |          >>> import pyActigraphy\n",
      " |          >>> rawAWD = pyActigraphy.io.read_raw_awd(fpath + 'SUBJECT_01.AWD')\n",
      " |          >>> pRA, pRA_weights = rawAWD.pRA(4, start='00:00:00', period='8H')\n",
      " |          >>> pRA\n",
      " |          counts\n",
      " |          1      0.169043\n",
      " |          2      0.144608\n",
      " |          3      0.163324\n",
      " |          (...)\n",
      " |          481    0.001157\n",
      " |          Name: counts, dtype: float64\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from pyActigraphy.filters.filters.FiltersMixin:\n",
      " |  \n",
      " |  add_mask_period(self, start, stop)\n",
      " |      Add a period to the inactivity mask\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      start: str\n",
      " |          Start time (YYYY-MM-DD HH:MM:SS) of the inactivity period.\n",
      " |      stop: str\n",
      " |          Stop time (YYYY-MM-DD HH:MM:SS) of the inactivity period.\n",
      " |  \n",
      " |  add_mask_periods(self, input_fname, *args, **kwargs)\n",
      " |      Add periods to the inactivity mask\n",
      " |      \n",
      " |      Function to read start and stop times from a Mask log file. Supports\n",
      " |      different file format (.ods, .xls(x), .csv).\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      input_fname: str\n",
      " |          Path to the log file.\n",
      " |      *args\n",
      " |          Variable length argument list passed to the subsequent reader\n",
      " |          function.\n",
      " |      **kwargs\n",
      " |          Arbitrary keyword arguments passed to the subsequent reader\n",
      " |          function.\n",
      " |  \n",
      " |  create_inactivity_mask(self, duration)\n",
      " |      Create a mask for inactivity (count equal to zero) periods.\n",
      " |      \n",
      " |      This mask has the same length as its underlying data and can be used\n",
      " |      to offuscate inactive periods where the actimeter has most likely been\n",
      " |      removed.\n",
      " |      Warning: use a sufficiently long duration in order not to mask sleep\n",
      " |      periods.\n",
      " |      A minimal duration corresponding to two hours seems reasonable.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      duration: int or str\n",
      " |          Minimal number of consecutive zeroes for an inactive period.\n",
      " |          Time offset strings (ex: '90min') can also be used.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(BaseRaw)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Set activity and light data (if available)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.114966Z",
     "start_time": "2020-06-23T17:32:17.105390Z"
    }
   },
   "outputs": [],
   "source": [
    "raw = BaseRaw(\n",
    "    name=\"myName\", \n",
    "    uuid='DeviceId', \n",
    "    format='Pandas', \n",
    "    axial_mode=None,\n",
    "    start_time=data.index[0],\n",
    "    period=(data.index[-1]-data.index[0]),\n",
    "    frequency=data.index.freq,\n",
    "    data=data['Activity'],\n",
    "    light=data['Light']\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.128314Z",
     "start_time": "2020-06-23T17:32:17.118657Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2020-01-01 00:00:00     9.803906\n",
       "2020-01-01 00:01:00    11.322234\n",
       "2020-01-01 00:02:00     8.204245\n",
       "2020-01-01 00:03:00     8.867003\n",
       "2020-01-01 00:04:00     9.187778\n",
       "                         ...    \n",
       "2020-01-07 23:55:00     7.516059\n",
       "2020-01-07 23:56:00    10.156999\n",
       "2020-01-07 23:57:00    10.241579\n",
       "2020-01-07 23:58:00    10.751310\n",
       "2020-01-07 23:59:00     9.172097\n",
       "Freq: 60S, Name: Activity, Length: 10080, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw.data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Set up a mask"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Most devices that have a wear sensor return this information as a binary time series with \"1\" when the device is most likely not worn and \"0\" otherwise.\n",
    "In pyActigraphy, this information can be used to create a mask and thus invalidate the corresponding data points (set to \"0\" most probably). However, the mask, the value \"1\" correspond to \"no masking\". So, depending on your \"non-wear\" data, be careful to transform them appropriately:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.137450Z",
     "start_time": "2020-06-23T17:32:17.131153Z"
    }
   },
   "outputs": [],
   "source": [
    "# Here, I assume that 0: the device is worn, 1: device not worn. \n",
    "# As mentioned aboce, for the mask, 1: no masking. (NB: it is a convolution: data*mask)\n",
    "raw.mask = np.abs(data['Non-wear']-1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.147068Z",
     "start_time": "2020-06-23T17:32:17.140440Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<604800 * Seconds>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw.duration()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.155859Z",
     "start_time": "2020-06-23T17:32:17.150140Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10080"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw.length()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.171604Z",
     "start_time": "2020-06-23T17:32:17.158430Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14254.226390926031"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw.ADAT(binarize=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.186343Z",
     "start_time": "2020-06-23T17:32:17.174562Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0947050893977417"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "raw.IV(binarize=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.192786Z",
     "start_time": "2020-06-23T17:32:17.189338Z"
    }
   },
   "outputs": [],
   "source": [
    "# If you want to mask the data\n",
    "raw.mask_inactivity = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-06-23T17:32:17.211430Z",
     "start_time": "2020-06-23T17:32:17.195616Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0822912245090293"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# For a gaussian noise, IV should be close to 2.\n",
    "raw.IV(binarize=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The masking seems to work!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Et voilÃ !"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python3 (pyActi)",
   "language": "python",
   "name": "pyactigraphy_py3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
